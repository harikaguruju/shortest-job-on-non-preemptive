#include <stdio.h>
#include <stdlib.h>

typedef struct proc {
    int id;
    int estimated_run_time;
    int wait_time;
    int turnaround_time;
    int arrival_time;
    float priority; // Priority = 1 + Waiting time / Estimated run time
} Process;

// Calculate the priority for each process
void calculatePriority(Process proc[], int n) {
    for (int i = 0; i < n; i++) {
        proc[i].priority = 1.0 + ((float)proc[i].wait_time / proc[i].estimated_run_time);
    }
}

// Calculate waiting times for processes
void findWaitingTime(Process proc[], int n) {
    proc[0].wait_time = 0;
    for (int i = 1; i < n; i++) {
        int wait = proc[i - 1].estimated_run_time + proc[i - 1].wait_time;
        proc[i].wait_time = wait > proc[i].arrival_time ? wait - proc[i].arrival_time : 0;
    }
}

// Calculate turnaround times for processes
void findavgTime(Process proc[], int n) {
    int total_wt = 0, total_tat = 0;
    findWaitingTime(proc, n);
    calculatePriority(proc, n);
    printf("Processes Arrival Time Estimated Run Time Waiting Time Priority\n");

    for (int i = 0; i < n; i++) {
        total_wt += proc[i].wait_time;
        total_tat += proc[i].estimated_run_time + proc[i].wait_time;
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%.2f\n", proc[i].id, proc[i].arrival_time, proc[i].estimated_run_time, proc[i].wait_time, proc[i].priority);
    }
    printf("Average waiting time: %.2f\n", (float)total_wt / n);
    printf("Average turnaround time: %.2f\n", (float)total_tat / n);
}

// Display the Gantt chart
void printGanttChart(Process proc[], int n) {
    printf("\nGantt Chart:\n");
    int total_time = 0;
    for (int i = 0; i < n; i++) {
        printf("| P%d ", proc[i].id);
        total_time += proc[i].estimated_run_time;
        if (i < n - 1) {
            printf("WT=%d |", proc[i].wait_time);
        }
    }
    printf("|\n");
    printf("   ");
    for (int i = 0; i < n; i++) {
        printf(" %d  ", total_time);
        total_time -= proc[i].estimated_run_time;
    }
    printf("\n");
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process proc[100];
    for (i = 0; i < n; i++) {
        printf("Enter the arrival time and estimated run time for Process[%d]: ", i + 1);
        scanf("%d %d", &proc[i].arrival_time, &proc[i].estimated_run_time);
        proc[i].id = i + 1;
    }

    int total_estimated_run_time = 0;
    for (i = 0; i < n; i++) {
        total_estimated_run_time += proc[i].estimated_run_time;
    }

    int current_time = 0;
    while (current_time < total_estimated_run_time) {
        for (i = 0; i < n; i++) {
            if (proc[i].arrival_time <= current_time && proc[i].estimated_run_time > 0) {
                printf("Time %d: Running Process P%d\n", current_time, proc[i].id);
                current_time += 1;
                proc[i].estimated_run_time -= 1;
            }
        }
    }

    findavgTime(proc, n);
    printGanttChart(proc, n);

    return 0;
}
 